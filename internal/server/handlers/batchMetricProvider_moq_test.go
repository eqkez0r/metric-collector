// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handlers

import (
	"context"
	"github.com/Eqke/metric-collector/pkg/metric"
	"sync"
)

// Ensure, that BatchMetricProviderMock does implement BatchMetricProvider.
// If this is not the case, regenerate this file with moq.
var _ BatchMetricProvider = &BatchMetricProviderMock{}

// BatchMetricProviderMock is a mock implementation of BatchMetricProvider.
//
//	func TestSomethingThatUsesBatchMetricProvider(t *testing.T) {
//
//		// make and configure a mocked BatchMetricProvider
//		mockedBatchMetricProvider := &BatchMetricProviderMock{
//			SetMetricsFunc: func(contextMoqParam context.Context, metricss []metric.Metrics) error {
//				panic("mock out the SetMetrics method")
//			},
//		}
//
//		// use mockedBatchMetricProvider in code that requires BatchMetricProvider
//		// and then make assertions.
//
//	}
type BatchMetricProviderMock struct {
	// SetMetricsFunc mocks the SetMetrics method.
	SetMetricsFunc func(contextMoqParam context.Context, metricss []metric.Metrics) error

	// calls tracks calls to the methods.
	calls struct {
		// SetMetrics holds details about calls to the SetMetrics method.
		SetMetrics []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Metricss is the metricss argument value.
			Metricss []metric.Metrics
		}
	}
	lockSetMetrics sync.RWMutex
}

// SetMetrics calls SetMetricsFunc.
func (mock *BatchMetricProviderMock) SetMetrics(contextMoqParam context.Context, metricss []metric.Metrics) error {
	if mock.SetMetricsFunc == nil {
		panic("BatchMetricProviderMock.SetMetricsFunc: method is nil but BatchMetricProvider.SetMetrics was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Metricss        []metric.Metrics
	}{
		ContextMoqParam: contextMoqParam,
		Metricss:        metricss,
	}
	mock.lockSetMetrics.Lock()
	mock.calls.SetMetrics = append(mock.calls.SetMetrics, callInfo)
	mock.lockSetMetrics.Unlock()
	return mock.SetMetricsFunc(contextMoqParam, metricss)
}

// SetMetricsCalls gets all the calls that were made to SetMetrics.
// Check the length with:
//
//	len(mockedBatchMetricProvider.SetMetricsCalls())
func (mock *BatchMetricProviderMock) SetMetricsCalls() []struct {
	ContextMoqParam context.Context
	Metricss        []metric.Metrics
} {
	var calls []struct {
		ContextMoqParam context.Context
		Metricss        []metric.Metrics
	}
	mock.lockSetMetrics.RLock()
	calls = mock.calls.SetMetrics
	mock.lockSetMetrics.RUnlock()
	return calls
}
