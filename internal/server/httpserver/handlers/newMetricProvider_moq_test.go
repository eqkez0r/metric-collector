// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handlers

import (
	"context"
	"sync"
)

// Ensure, that NewMetricProviderMock does implement NewMetricProvider.
// If this is not the case, regenerate this file with moq.
var _ NewMetricProvider = &NewMetricProviderMock{}

// NewMetricProviderMock is a mock implementation of NewMetricProvider.
//
//	func TestSomethingThatUsesNewMetricProvider(t *testing.T) {
//
//		// make and configure a mocked NewMetricProvider
//		mockedNewMetricProvider := &NewMetricProviderMock{
//			SetValueFunc: func(contextMoqParam context.Context, s1 string, s2 string, s3 string) error {
//				panic("mock out the SetValue method")
//			},
//		}
//
//		// use mockedNewMetricProvider in code that requires NewMetricProvider
//		// and then make assertions.
//
//	}
type NewMetricProviderMock struct {
	// SetValueFunc mocks the SetValue method.
	SetValueFunc func(contextMoqParam context.Context, s1 string, s2 string, s3 string) error

	// calls tracks calls to the methods.
	calls struct {
		// SetValue holds details about calls to the SetValue method.
		SetValue []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S1 is the s1 argument value.
			S1 string
			// S2 is the s2 argument value.
			S2 string
			// S3 is the s3 argument value.
			S3 string
		}
	}
	lockSetValue sync.RWMutex
}

// SetValue calls SetValueFunc.
func (mock *NewMetricProviderMock) SetValue(contextMoqParam context.Context, s1 string, s2 string, s3 string) error {
	if mock.SetValueFunc == nil {
		panic("NewMetricProviderMock.SetValueFunc: method is nil but NewMetricProvider.SetValue was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		S1              string
		S2              string
		S3              string
	}{
		ContextMoqParam: contextMoqParam,
		S1:              s1,
		S2:              s2,
		S3:              s3,
	}
	mock.lockSetValue.Lock()
	mock.calls.SetValue = append(mock.calls.SetValue, callInfo)
	mock.lockSetValue.Unlock()
	return mock.SetValueFunc(contextMoqParam, s1, s2, s3)
}

// SetValueCalls gets all the calls that were made to SetValue.
// Check the length with:
//
//	len(mockedNewMetricProvider.SetValueCalls())
func (mock *NewMetricProviderMock) SetValueCalls() []struct {
	ContextMoqParam context.Context
	S1              string
	S2              string
	S3              string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S1              string
		S2              string
		S3              string
	}
	mock.lockSetValue.RLock()
	calls = mock.calls.SetValue
	mock.lockSetValue.RUnlock()
	return calls
}
